#!/usr/bin/env node
var mongo = require('../lib/mongo');
var js = require('../lib/javascript');
var async = require('async');
var channelManager = require('../managers/channelManager');

var argv = require('optimist')
  .usage('Makes user account into developer/super-user account.\nUsage: $0 [--id channel-id] [--name "full name"] [--email joe@example.com]')
  .check(function(argv) { 
    var count = 0;
    if (argv.id) count++;
    if (argv.name) count++;
    if (argv.email) count++;
    return count === 1;
  })
  .argv;

mongo.initialize(function (error) 
{
  if (error) {
    console.log("Initialization failed:"+js.pp(error));
  }
  else {
    var criterion = { type: 'user' };
    if (argv.name) { 
      criterion = {name:argv.name};
    }
    else if (argv.id) { 
      criterion = {_id:mongo.ObjectID(argv.id)};
    }
    else if (argv.email) { 
      criterion = {email:argv.email};
    }
    else {
      console.log(argv.help());
      process.exit(-1);
    }

    //console.log("Searching for " + js.pp(criterion));
    mongo.channels.findOne(criterion,function (error,user) {
      if (error) {
        console.log("Failed to find matching channel"+ js.pp(criterion) +": " + js.pp(error));
        mongo.db.close();
        process.exit(-1);
      }
      else if (user && js.classOf(user._id)===mongo.ObjectID) {
        mongo.channels.update({_id: user._id}, {$set: {isDeveloper: true}}, function(error) { 
          mongo.db.close();
          if (error) { 
            console.log("Failed to update user "+ js.pp(criterion) +": " + js.pp(error));
            process.exit(-1);
          }
          else {
            process.exit(0);
          }
        });
      }
    });
  }
});

